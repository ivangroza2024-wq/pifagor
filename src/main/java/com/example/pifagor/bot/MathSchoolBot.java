package com.example.pifagor.bot;

import com.example.pifagor.model.Faculty;
import com.example.pifagor.model.Group;
import com.example.pifagor.model.RegistrationRequest;
import com.example.pifagor.model.Role;
import com.example.pifagor.model.User;
import com.example.pifagor.repository.FacultyRepository;
import com.example.pifagor.repository.GroupRepository;
import com.example.pifagor.repository.UserRepository;
import com.example.pifagor.service.GoogleDriveService;
import com.example.pifagor.service.GoogleSheetsService;
import com.example.pifagor.service.RegistrationRequestService;
import com.example.pifagor.service.TelegramService;
import com.example.pifagor.service.UserService;
import com.example.pifagor.util.DateUtil;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;

import org.telegram.telegrambots.bots.TelegramWebhookBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.*;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import java.io.InputStream;
import java.io.Serializable;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;


@Component
public class MathSchoolBot extends TelegramWebhookBot {

    private final UserService userService;
    private final UserRepository userRepository;
    private final FacultyRepository facultyRepository;
    private final TelegramService telegramService;
    private final GoogleDriveService driveService;
    private final GroupRepository groupRepository;
    private final RegistrationRequestService registrationRequestService;
    private final GoogleSheetsService sheetsService;

    @Value("${telegram.bot.username}")
    private String botUsername;

    @Value("${telegram.bot.token}")
    private String botToken;

    @Value("${telegram.admin.chatId}")
    private Long adminChatId;

    @Value("${TELEGRAM_BOT_WEBHOOK_PATH}")
    private String webhookPath;


    private final String rootFolderId = "16mUO4OUdMjsjjbziYZTqwSWOvKo2qZOM";

    public MathSchoolBot(UserService userService,
                         UserRepository userRepository,
                         FacultyRepository facultyRepository,
                         TelegramService telegramService,
                         GoogleDriveService driveService,
                         GroupRepository groupRepository,
                         RegistrationRequestService registrationRequestService,
                         GoogleSheetsService sheetsService) {
        this.userService = userService;
        this.userRepository = userRepository;
        this.facultyRepository = facultyRepository;
        this.telegramService = telegramService;
        this.driveService = driveService;
        this.groupRepository = groupRepository;
        this.registrationRequestService = registrationRequestService;
        this.sheetsService = sheetsService;
    }
    @Override
    public String getBotUsername() {
        return botUsername;
    }


    @Override
    public String getBotToken() {
        return botToken;
    }
    @Override
    public String getBotPath() {
        return webhookPath; // –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "/webhook"
    }
    @Override
    public BotApiMethod<?> onWebhookUpdateReceived(Update update) {
        System.out.println("=== NEW UPDATE (WEBHOOK) ===");
        System.out.println(update.toString());

        try {
            if (update.hasMessage()) {

                Message message = update.getMessage();
                Long userId = message.getFrom().getId();
                User user = userService.findByTelegramId(userId);

                if (message.hasText()) {
                    String text = message.getText();
                    switch (text) {
                        case "üìö –î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è" -> {
                            sendHomeworkMenu(message.getChatId(), null, user);
                            return null;
                        }
                        case "‚öîÔ∏è –ë–∏—Ç–≤–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–≤" -> {
                            handleFacultyBattle(message.getChatId(), user, null);
                            return null;
                        }
                        case "üìã –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—ó –î–ó" -> {
                            sendHomeworkStatus(message.getChatId(), user);
                            return null;
                        }
                        case "‚úèÔ∏è –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –æ—Ü—ñ–Ω–∫—É" -> {
                            /*
                            sheetsService.updateHomeworkDropdowns(List.of("6–∫–ª.–ü–Ω.–ß—Ç.16:00",
                                    "9–∫–ª.–ü–Ω.–ß—Ç.17:00",
                                    "6–∫–ª.–ü–Ω.–ß—Ç.18:00"));
                            sheetsService.addHomeworkColorRulesForSheet("6–∫–ª.–ü–Ω.–ß—Ç.16:00");
                            sheetsService.addHomeworkColorRulesForSheet("9–∫–ª.–ü–Ω.–ß—Ç.17:00");
                            sheetsService.addHomeworkColorRulesForSheet("6–∫–ª.–ü–Ω.–ß—Ç.18:00");
                            sheetsService.updateHomeworkDropdowns(List.of( "6–∫–ª.–ü–Ω.–ß—Ç.19:00",
                                            "8–∫–ª.–ü–Ω.–ß—Ç.20:00",
                                            "6–∫–ª.–í—Ç.–ü—Ç.16:00"));
                            sheetsService.addHomeworkColorRulesForSheet("6–∫–ª.–ü–Ω.–ß—Ç.19:00");
                            sheetsService.addHomeworkColorRulesForSheet("8–∫–ª.–ü–Ω.–ß—Ç.20:00");
                            sheetsService.addHomeworkColorRulesForSheet("6–∫–ª.–í—Ç.–ü—Ç.16:00");
                            sheetsService.updateHomeworkDropdowns(List.of("5–∫–ª.–í—Ç.–ü—Ç.17:00",
                                    "6–∫–ª.–í—Ç.–ü—Ç.18:00",
                                    "5–∫–ª.–í—Ç.–ü—Ç.19:00"));
                            sheetsService.addHomeworkColorRulesForSheet("5–∫–ª.–í—Ç.–ü—Ç.17:00");
                            sheetsService.addHomeworkColorRulesForSheet("6–∫–ª.–í—Ç.–ü—Ç.18:00");
                            sheetsService.addHomeworkColorRulesForSheet("5–∫–ª.–í—Ç.–ü—Ç.19:00");
                            sheetsService.updateHomeworkDropdowns(List.of("8–∫–ª.–í—Ç20:00.–°–±.12:00",
                                    "8–∫–ª.–°—Ä.17:00.–°–±.15:00",
                                    "6–∫–ª.–°—Ä.–°–±.16:00"));
                            sheetsService.addHomeworkColorRulesForSheet("8–∫–ª.–í—Ç20:00.–°–±.12:00");
                            sheetsService.addHomeworkColorRulesForSheet("8–∫–ª.–°—Ä.17:00.–°–±.15:00");
                            sheetsService.addHomeworkColorRulesForSheet("6–∫–ª.–°—Ä.–°–±.16:00");
                            sheetsService.updateHomeworkDropdowns(List.of(
                                    "8–∫–ª.–°—Ä.18:00.–°–±.13:00",
                                    "6–∫–ª.–°—Ä.19:00.–°–±.14:00"
                            ));
                            sheetsService.addHomeworkColorRulesForSheet("8–∫–ª.–°—Ä.18:00.–°–±.13:00");
                            sheetsService.addHomeworkColorRulesForSheet("6–∫–ª.–°—Ä.19:00.–°–±.14:00");
                        */
                            sendTeacherGroups(message.getChatId(), null);
                            return null;
                        }
                        case "üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è" -> {
                            sendGroupSelection(message.getChatId(), null);
                            return null;
                        }
                        default -> {
                            handleMessage(message);
                            return null;
                        }
                    }
                } else if (message.hasDocument() && user != null) {
                    handleDocument(message, user);
                    return null;
                } else if (message.hasPhoto() && user != null) {
                    handlePhoto(message, user);
                    return null;
                }
            } else if (update.hasCallbackQuery()) {
                handleCallback(update.getCallbackQuery());
                return null;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null; // —è–∫—â–æ –Ω–µ–º–∞ —â–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—Ç–∏ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥—Ä–∞–∑—É
    }


    // ================= MAIN MENU =================
    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        User user = userService.findByTelegramId(chatId);
        ReplyKeyboardMarkup replyKeyboard = buildMainMenu(user);
        message.setReplyMarkup(replyKeyboard);

        executeMessage(message);
    }

    private ReplyKeyboardMarkup buildMainMenu(User user) {
        ReplyKeyboardMarkup keyboard = new ReplyKeyboardMarkup();
        keyboard.setResizeKeyboard(true);
        keyboard.setOneTimeKeyboard(false);
        keyboard.setSelective(true);

        List<KeyboardRow> rows = new ArrayList<>();

        if (user == null) {
            KeyboardRow r = new KeyboardRow();
            r.add("üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è");
            rows.add(r);
        } else {
            switch (user.getRole()) {
                case PARENT -> {
                    KeyboardRow r = new KeyboardRow();
                    r.add("üìù –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –î–ó");
                    rows.add(r);
                }
                case STUDENT -> {
                    KeyboardRow r1 = new KeyboardRow();
                    r1.add("üìù –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –î–ó");
                    rows.add(r1);
                    KeyboardRow r2 = new KeyboardRow();
                    r2.add("üèÜ –ë–∏—Ç–≤–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–≤");
                    rows.add(r2);
                    KeyboardRow r3 = new KeyboardRow();
                    r3.add("üìã –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—ó –î–ó");
                    rows.add(r3);
                }
                case TEACHER -> {
                    KeyboardRow r1 = new KeyboardRow();
                    r1.add("‚úèÔ∏è –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –æ—Ü—ñ–Ω–∫—É");
                    rows.add(r1);
                    KeyboardRow r2 = new KeyboardRow();
                    r2.add("üèÜ –ë–∏—Ç–≤–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–≤");
                    rows.add(r2);
                }
            }
        }

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    // ================= CALLBACK =================
    private void handleCallback(CallbackQuery callbackQuery) {
        Long chatId = callbackQuery.getMessage().getChatId();
        Integer messageId = callbackQuery.getMessage().getMessageId();
        String data = callbackQuery.getData() == null ? "" : callbackQuery.getData().trim();
        Long userId = callbackQuery.getFrom().getId();
        User user = userService.findByTelegramId(userId);

        System.out.println("Received callback: [" + data + "] from userId: " + userId);

        try {
            // ---- –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ (inline) ----
            if ("menu_main".equals(data)) {
                sendMainMenu(chatId); // —Ç—É—Ç –∑–∞–≤–∂–¥–∏ –ø–æ–∫–∞–∑—É—î–º–æ ReplyKeyboard
                return;
            }
            if ("menu_homework".equals(data)) {
                if (user == null) {
                    editMessage(chatId, messageId, "‚ùó –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.", null);
                } else {
                    sendHomeworkMenu(chatId, messageId, user);
                }
                return;
            }
            if ("menu_battle".equals(data)) {
                handleFacultyBattle(chatId, user, messageId);
                return;
            }
            if ("check_homework_status".equals(data)) {
                sendHomeworkStatus(chatId, user);
                return;
            }
            if ("menu_teacher".equals(data)) {
                sendTeacherGroups(chatId, messageId);
                return;
            }

            // ---- –†–û–õ–Ü –ø—ñ–¥ —á–∞—Å —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó ----
            if (data.startsWith("role_")) {
                registrationRequestService.saveRole(userId, data.substring(5));
                sendGroupSelection(chatId, messageId);
                return;
            }

            // ---- –í–∏–±—ñ—Ä –≥—Ä—É–ø–∏ ----
            if (data.startsWith("group_")) {
                Long groupId = Long.parseLong(data.substring(6));
                registrationRequestService.savePendingGroup(userId, groupId);
                String role = registrationRequestService.getRole(userId);
                if ("parent".equals(role)) {
                    Optional<Group> groupOpt = groupRepository.findById(groupId);
                    if (groupOpt.isPresent()) {
                        sendChildSelectionForParent(chatId, messageId, groupOpt.get(), userId);
                    } else {
                        editMessage(chatId, messageId, "‚ùå –ì—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.", null);
                    }
                } else {
                    editMessage(chatId, messageId, "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ü–º‚Äô—è:", null);
                }
                return;
            }

            // ---- –ë–ê–¢–¨–ö–ò: –≤–∏–±—ñ—Ä –¥–∏—Ç–∏–Ω–∏ ----
            if (data.startsWith("parent_child_")) {
                Long childId = Long.parseLong(data.substring("parent_child_".length()));
                registrationRequestService.savePendingChild(userId, childId);
                editMessage(chatId, messageId, "‚úçÔ∏è –í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ü—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ –Ü–º‚Äô—è (–±–∞—Ç—å–∫–∏):", null);
                return;
            }

            // ---- –ê–î–ú–Ü–ù: –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏/–≤—ñ–¥—Ö–∏–ª–∏—Ç–∏ ----
            if (data.startsWith("approve_")) {
                Long requestId = Long.parseLong(data.substring(8));
                RegistrationRequest req = registrationRequestService.approve(requestId);

                editMessage(chatId, messageId, "‚úÖ –ó–∞—è–≤–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!", null);
                sendMessage(req.getTelegramId(),
                        "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞! –í–∏ –≤ –≥—Ä—É–ø—ñ '" +
                                groupRepository.findById(req.getGroupId()).map(Group::getName).orElse("–ù–µ–≤—ñ–¥–æ–º–∞") + "'");
                sendMainMenu(req.getTelegramId()); // ReplyKeyboard
                return;
            }
            if (data.startsWith("reject_")) {
                registrationRequestService.reject(Long.parseLong(data.substring(7)));
                editMessage(chatId, messageId, "‚ùå –ó–∞—è–≤–∫–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞.", null);
                return;
            }
            if (data.startsWith("homework_")) {
                String date = data.substring(9);
                userService.setPendingHomeworkDate(userId, date);
                editMessage(chatId, messageId,
                        "üìå –û–±—Ä–∞–Ω–æ —É—Ä–æ–∫: " + date + "\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ –∞–±–æ PDF –¥–æ–º–∞—à–Ω—å–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è.", null);
                return;
            }
            // ---- TEACHER: –≥—Ä—É–ø–∏ ‚Üí —É—á–Ω—ñ ‚Üí –æ—Ü—ñ–Ω–∫–∏ ----
            if (data.startsWith("teacher_group_")) {
                Long groupId = Long.parseLong(data.substring("teacher_group_".length()));
                Optional<Group> groupOpt = groupRepository.findById(groupId);
                if (groupOpt.isEmpty()) {
                    editMessage(chatId, messageId, "‚ùå –ì—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", null);
                    return;
                }
                sendStudentSelection(chatId, messageId, groupOpt.get());
                return;
            }
            if (data.startsWith("teacher_student_")) {
                String payload = data.substring("teacher_student_".length());
                String[] parts = payload.split("\\|", 2);
                Long groupId = Long.parseLong(parts[0]);
                String student = parts[1].replace("~", " ");
                Optional<Group> groupOpt = groupRepository.findById(groupId);
                if (groupOpt.isEmpty()) {
                    editMessage(chatId, messageId, "‚ùå –ì—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", null);
                    return;
                }
                sendGradeSelection(chatId, messageId, groupOpt.get().getId(), groupOpt.get().getName(), student);
                return;
            }
            if (data.startsWith("teacher_grade_")) {
                String payload = data.substring("teacher_grade_".length());
                String[] parts = payload.split("\\|", 3);
                Long groupId = Long.parseLong(parts[0]);
                String student = parts[1].replace("~", " ");
                int grade = Integer.parseInt(parts[2]);
                Optional<Group> groupOpt = groupRepository.findById(groupId);
                if (groupOpt.isEmpty()) {
                    editMessage(chatId, messageId, "‚ùå –ì—Ä—É–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", null);
                    return;
                }
                String today = LocalDate.now().format(DateTimeFormatter.ofPattern("dd.MM"));
                sheetsService.setGrade(groupOpt.get().getName(), student, today, grade);
                editMessage(chatId, messageId, "‚úÖ –û—Ü—ñ–Ω–∫–∞ " + grade + " –≤–∏—Å—Ç–∞–≤–ª–µ–Ω–∞ –¥–ª—è " + student, null);
                List<User> users = userRepository.findByName(student);
                if (!users.isEmpty()) {
                    addPointsForUser(users.get(0), grade, "–û—Ü—ñ–Ω–∫–∞ –∑–∞ —É—Ä–æ–∫");
                }
                return;
            }

            // ---- FACULTY ----
            if ("faculty_sorting".equals(data)) {
                handleFacultySorting(chatId, user, messageId);
                return;
            }
            if ("faculty_reset".equals(data)) {
                if (user != null && Role.TEACHER.equals(user.getRole())) {
                    handleFacultyReset(chatId, messageId);
                } else {
                    editMessage(chatId, messageId, "‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ —Ü—é –¥—ñ—é.", null);
                }
                return;
            } else {
                // ---- –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ ----
                editMessage(chatId, messageId, "‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: " + data, null);
            }
        } catch (Exception e) {
            editMessage(chatId, messageId, "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: " + e.getMessage(), null);
            e.printStackTrace();
        }
    }


    // —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π editMessage
    private void editMessage(Long chatId, Integer messageId, String text, InlineKeyboardMarkup markup) {
        try {
            EditMessageText editMessage = EditMessageText.builder()
                    .chatId(chatId.toString())
                    .messageId(messageId)
                    .text(text)
                    .replyMarkup(markup)
                    .build();
            execute(editMessage);
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(chatId, text); // fallback
        }
    }

    private void sendMainMenu(Long chatId, Integer messageId, User user) {
        String text = "üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é";

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        if (user == null) {
            rows.add(List.of(
                    InlineKeyboardButton.builder().text("üìù –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è").callbackData("start_registration").build()
            ));
        } else {
            switch (user.getRole()) {
                case PARENT -> rows.add(List.of(
                        InlineKeyboardButton.builder().text("üìö –î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è").callbackData("menu_homework").build()
                ));
                case STUDENT -> {
                    rows.add(List.of(
                            InlineKeyboardButton.builder().text("üìö –î–æ–º–∞—à–Ω—î –∑–∞–≤–¥–∞–Ω–Ω—è").callbackData("menu_homework").build()
                    ));
                    rows.add(List.of(
                            InlineKeyboardButton.builder().text("‚öîÔ∏è –ë–∏—Ç–≤–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–≤").callbackData("menu_battle").build()
                    ));
                    rows.add(List.of(
                            InlineKeyboardButton.builder().text("üìã –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—ó –î–ó").callbackData("check_homework_status").build()
                    ));
                }
                case TEACHER -> {
                    rows.add(List.of(
                            InlineKeyboardButton.builder().text("‚úèÔ∏è –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ –æ—Ü—ñ–Ω–∫—É").callbackData("menu_teacher").build()
                    ));
                    rows.add(List.of(
                            InlineKeyboardButton.builder().text("‚öîÔ∏è –ë–∏—Ç–≤–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–≤").callbackData("menu_battle").build()
                    ));
                }
            }
        }

        markup.setKeyboard(rows);

        if (messageId == null) {
            SendMessage msg = SendMessage.builder()
                    .chatId(chatId)
                    .text(text)
                    .replyMarkup(markup)
                    .build();
            executeSafely(msg);
        } else {
            EditMessageText edit = EditMessageText.builder()
                    .chatId(chatId.toString())
                    .messageId(messageId)
                    .text(text)
                    .replyMarkup(markup)
                    .build();
            executeSafely(edit);
        }
    }

    // ------------------- CALLBACK -------------------
    private <T extends Serializable, M extends BotApiMethod<T>> void executeSafely(M method) {
        try {
            execute(method);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void sendChildSelectionForParent(Long chatId, Integer messageId, Group group, Long parentTelegramId) {
        List<User> students = userRepository.findByGroupAndRole(group, Role.STUDENT);
        if (students.isEmpty()) {
            sendMessage(chatId, "–£ —Ü—ñ–π –≥—Ä—É–ø—ñ —â–µ –Ω–µ–º–∞—î –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –¥—ñ—Ç–µ–π.");
            return;
        }

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (User child : students) {
            rows.add(Collections.singletonList(
                    InlineKeyboardButton.builder()
                            .text(child.getName())
                            .callbackData("parent_child_" + child.getId())
                            .build()
            ));
        }
        markup.setKeyboard(rows);

        SendMessage msg = new SendMessage(chatId.toString(),
                "–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É –¥–∏—Ç–∏–Ω—É –∑—ñ —Å–ø–∏—Å–∫—É –≥—Ä—É–ø–∏ " + group.getName() + ":");
        msg.setReplyMarkup(markup);
        executeMessage(msg);
    }

    private void notifyAdminAboutNewParent(RegistrationRequest req, User child) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(adminChatId));
        message.setText("–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ –±–∞—Ç—å–∫—ñ–≤:\n" +
                "üë®‚Äçüë©‚Äçüëß –ë–∞—Ç—å–∫–∏: " + req.getName() +
                "\n–î–∏—Ç–∏–Ω–∞: " + (child != null ? child.getName() : "–Ω–µ–≤—ñ–¥–æ–º–æ") +
                "\n–ì—Ä—É–ø–∞: " + registrationRequestService.getGroupName(req.getGroupId()) +
                "\nTelegram ID (–±–∞—Ç—å–∫–∏): " + req.getTelegramId());
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(InlineKeyboardButton.builder().text("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏").callbackData("approve_" + req.getId()).build());
        row.add(InlineKeyboardButton.builder().text("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏").callbackData("reject_" + req.getId()).build());
        markup.setKeyboard(Collections.singletonList(row));
        message.setReplyMarkup(markup);
        executeMessage(message);
    }

    // ------------------- TEACHER -------------------
    private void sendTeacherGroups(Long chatId, Integer messageId) {
        DayOfWeek today = LocalDate.now().getDayOfWeek();
        String todayShort = switch (today) {
            case MONDAY -> "–ü–Ω";
            case TUESDAY -> "–í—Ç";
            case WEDNESDAY -> "–°—Ä";
            case THURSDAY -> "–ß—Ç";
            case FRIDAY -> "–ü—Ç";
            case SATURDAY -> "–°–±";
            default -> null;
        };

        List<Group> groups = groupRepository.findAll();
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (Group g : groups) {
            if (g.getDay1().equals(todayShort) || g.getDay2().equals(todayShort)) {
                rows.add(Collections.singletonList(
                        InlineKeyboardButton.builder()
                                .text(g.getName())
                                .callbackData("teacher_group_" + g.getId())
                                .build()
                ));
            }
        }

        // add reset button for teachers at the end of teacher menu
        rows.add(Collections.singletonList(
                InlineKeyboardButton.builder()
                        .text("‚ôªÔ∏è –°–∫–∏–Ω—É—Ç–∏ –±–∏—Ç–≤—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–≤")
                        .callbackData("faculty_reset")
                        .build()
        ));

        if (rows.isEmpty()) {
            sendMessage(chatId, "–°—å–æ–≥–æ–¥–Ω—ñ –Ω–µ–º–∞—î –∑–∞–Ω—è—Ç—å.");
            return;
        }

        markup.setKeyboard(rows);
        SendMessage msg = new SendMessage(chatId.toString(), "–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É (–∞–±–æ —Å–∫–∏–Ω—å—Ç–µ –±–∏—Ç–≤—É):");
        msg.setReplyMarkup(markup);
        executeMessage(msg);
    }

    private void sendStudentSelection(Long chatId, Integer messageId, Group group) {
        try {
            List<String> students = sheetsService.getStudents(group.getName());
            if (students == null || students.isEmpty()) {
                sendMessage(chatId, "‚ùå –£ —Ü—ñ–π –≥—Ä—É–ø—ñ –Ω–µ–º–∞—î —É—á–Ω—ñ–≤.");
                return;
            }

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();

            for (String s : students) {
                // replace spaces with ~ for callback safety
                String callbackData = "teacher_student_" + group.getId() + "|" + s.replace(" ", "~");
                rows.add(Collections.singletonList(
                        InlineKeyboardButton.builder()
                                .text(s)
                                .callbackData(callbackData)
                                .build()
                ));
            }

            markup.setKeyboard(rows);
            SendMessage msg = new SendMessage(chatId.toString(), "–û–±–µ—Ä—ñ—Ç—å —É—á–Ω—è:");
            msg.setReplyMarkup(markup);
            executeMessage(msg);

            System.out.println("Sent student selection for group: " + group.getName());

        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(chatId, "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —É—á–Ω—ñ–≤: " + e.getMessage());
        }
    }

    private void sendGradeSelection(Long chatId, Integer messageId, Long groupId, String groupName, String student) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        String studentCallback = student.replace(" ", "~");

        for (int i = 0; i <= 12; i++) {
            String gradeText = i == 0 ? "–Ω" : String.valueOf(i);
            String callbackData = "teacher_grade_" + groupId + "|" + studentCallback + "|" + i;

            rows.add(Collections.singletonList(
                    InlineKeyboardButton.builder()
                            .text(gradeText)
                            .callbackData(callbackData)
                            .build()
            ));
        }

        markup.setKeyboard(rows);
        SendMessage msg = new SendMessage(chatId.toString(),
                "–í–∏—Å—Ç–∞–≤–∏—Ç–∏ –æ—Ü—ñ–Ω–∫—É –¥–ª—è " + student + ":");
        msg.setReplyMarkup(markup);
        executeMessage(msg);

        System.out.println("Sent grade selection for student: " + student + " in group: " + groupName);
    }

    // ------------------- FACULTY BATTLE -------------------
    private void handleFacultyBattle(Long chatId, User user, Integer messageId) {
        if (user == null) {
            sendMessage(chatId, "‚ùó –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.");
            return;
        }

        if (user.getFaculty() == null) {
            // show sorting hat message + button
            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            rows.add(Collections.singletonList(
                    InlineKeyboardButton.builder()
                            .text("üé© –†–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏")
                            .callbackData("faculty_sorting")
                            .build()
            ));
            markup.setKeyboard(rows);

            SendMessage msg = new SendMessage(chatId.toString(),
                    "üé© –†–æ–∑–ø–æ–¥—ñ–ª—è—é—á–∞ —à–ª—è–ø–∞ –∫–∞–∂–µ:\n\n" +
                            "–©–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å —É –ë–∏—Ç–≤—ñ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–≤, –ø–æ—Ç—Ä—ñ–±–Ω–æ:\n" +
                            "‚Ä¢ –í–∏–∫–æ–Ω—É–≤–∞—Ç–∏ –¥–æ–º–∞—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è\n" +
                            "‚Ä¢ –ë—É—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–º –Ω–∞ —É—Ä–æ–∫–∞—Ö\n" +
                            "‚Ä¢ –ú–∞—Ç–∏ —Ö–æ—Ä–æ—à—É –ø–æ–≤–µ–¥—ñ–Ω–∫—É\n\n" +
                            "–Ø–∫—â–æ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å ‚Äî –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å ¬´–†–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏¬ª —ñ —à–ª—è–ø–∞ –æ–±–µ—Ä–µ –¥–ª—è –≤–∞—Å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç.");
            msg.setReplyMarkup(markup);
            executeMessage(msg);
        } else {
            // show faculties ranking + user's faculty top-3
            List<Faculty> allFaculties = facultyRepository.findAll();
            allFaculties.sort(Comparator.comparingInt(Faculty::getPoints).reversed());

            StringBuilder sb = new StringBuilder("üèÜ –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–≤:\n\n");
            for (int i = 0; i < allFaculties.size(); i++) {
                Faculty f = allFaculties.get(i);
                sb.append(i + 1).append(". ").append(f.getName())
                        .append(" ").append(f.getSymbol() == null ? "" : f.getSymbol())
                        .append(" ‚Äî ").append(f.getPoints()).append(" –±–∞–ª—ñ–≤\n");
            }

            sb.append("\n–í–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: ")
                    .append(user.getFaculty().getName())
                    .append(" ").append(user.getFaculty().getSymbol() == null ? "" : user.getFaculty().getSymbol())
                    .append(" (–æ—Å–æ–±–∏—Å—Ç–æ: ").append(user.getFaculty() == null ? 0 : user.getFacultyPoints()) // note: faculty points
                    .append(")\n\n");

            // top-3 users in user's faculty
            List<User> allUsers = userRepository.findAll();
            List<User> sameFacultyUsers = new ArrayList<>();
            for (User u : allUsers) {
                if (u.getFaculty() != null && u.getFaculty().getId().equals(user.getFaculty().getId())) {
                    sameFacultyUsers.add(u);
                }
            }
            sameFacultyUsers.sort((a, b) -> Integer.compare(b.getFacultyPoints(), a.getFacultyPoints()));

            sb.append("‚≠ê –¢–æ–ø-3 —É—á–∞—Å–Ω–∏–∫–∏ –≤–∞—à–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É:\n");
            for (int i = 0; i < Math.min(3, sameFacultyUsers.size()); i++) {
                User u = sameFacultyUsers.get(i);
                sb.append(i + 1).append(". ").append(u.getName()).append(" ‚Äî ").append(u.getFacultyPoints()).append(" –±–∞–ª—ñ–≤\n");
            }

            sendMessage(chatId, sb.toString());
        }
    }

    private void handleFacultySorting(Long chatId, User user, Integer messageId) {
        if (user == null) {
            sendMessage(chatId, "‚ùó –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.");
            return;
        }

        // 1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ –º–∞—î —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        if (user.getFaculty() != null) {
            sendMessage(chatId, "‚ùå –í–∏ –≤–∂–µ –Ω–∞–ª–µ–∂–∏—Ç–µ –¥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É "
                    + user.getFaculty().getName() + " —ñ –Ω–µ –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏ –Ω–æ–≤–∏–π.");
            return;
        }

        // 2Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∏
        List<Faculty> faculties = facultyRepository.findAll();
        if (faculties.isEmpty()) {
            sendMessage(chatId, "‚ùå –§–∞–∫—É–ª—å—Ç–µ—Ç–∏ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ.");
            return;
        }

        // 3Ô∏è‚É£ –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç(–∏) –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —É—á–Ω—ñ–≤
        // –∑–Ω–∞—Ö–æ–¥–∏–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–Ω—ñ–≤ —É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞—Ö
        int minCount = faculties.stream()
                .mapToInt(f -> userRepository.countByFaculty(f))
                .min()
                .orElse(0);

// –≤–∏–±–∏—Ä–∞—î–º–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∏ –∑ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–æ—é –∫—ñ–ª—å–∫—ñ—Å—Ç—é —É—á–Ω—ñ–≤
        List<Faculty> candidates = faculties.stream()
                .filter(f -> userRepository.countByFaculty(f) == minCount)
                .toList();


        // 4Ô∏è‚É£ –í–∏–±–∏—Ä–∞—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç —Å–µ—Ä–µ–¥ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤
        Faculty chosen = candidates.get(new Random().nextInt(candidates.size()));

        // 5Ô∏è‚É£ –ü—Ä–∏–≤'—è–∑—É—î–º–æ —É—á–Ω—è –¥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É
        user.setFaculty(chosen);
        user.setFacultyPoints(0);
        userService.save(user);

        // 6Ô∏è‚É£ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
        String text = "üéâ –í—ñ—Ç–∞—î–º–æ! –í–∏ –ø–æ—Ç—Ä–∞–ø–∏–ª–∏ –¥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É *"
                + chosen.getName() + "* "
                + (chosen.getSymbol() == null ? "" : chosen.getSymbol());
        SendMessage msg = new SendMessage(chatId.toString(), text);
        msg.setParseMode("Markdown");
        executeMessage(msg);

        // 7Ô∏è‚É£ –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É, —è–∫—â–æ —ñ—Å–Ω—É—î
        try {
            String resourceName = "/faculties/" + chosen.getName() + ".png";
            InputStream pic = getClass().getResourceAsStream(resourceName);
            if (pic != null) {
                SendPhoto photo = new SendPhoto();
                photo.setChatId(chatId.toString());
                photo.setPhoto(new InputFile(pic, chosen.getName() + ".png"));
                photo.setCaption("–í–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: " + chosen.getName() + " "
                        + (chosen.getSymbol() == null ? "" : chosen.getSymbol()));
                execute(photo);
            } else {
                System.out.println("Faculty image not found for resource: " + resourceName);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleFacultyReset(Long chatId, Integer messageId) {
        // Reset all users' faculty link and personal points, and faculty points
        List<User> allUsers = userRepository.findAll();
        for (User u : allUsers) {
            u.setFaculty(null);
            u.setFacultyPoints(0);
        }
        userRepository.saveAll(allUsers);

        List<Faculty> allFaculties = facultyRepository.findAll();
        for (Faculty f : allFaculties) {
            f.setPoints(0);
        }
        facultyRepository.saveAll(allFaculties);

        sendMessage(chatId, "‚ôªÔ∏è –£—Å—ñ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∏ —Ç–∞ –æ—Å–æ–±–∏—Å—Ç—ñ –±–∞–ª–∏ —Å–∫–∏–Ω—É—Ç—ñ. –ü–æ—á–∏–Ω–∞—î–º–æ –Ω–æ–≤–∏–π —Å–µ–∑–æ–Ω!");
        System.out.println("Faculties and user faculty-points reset by teacher (chatId=" + chatId + ")");
    }

    // helper to add points both to user and to faculty total
    private void addPointsForUser(User u, int points, String reason) {
        if (u == null) return;
        if (points <= 0) return;

        // add to user's personal faculty points
        u.setFacultyPoints(u.getFacultyPoints() + points);
        userRepository.save(u);

        // add to faculty aggregate
        if (u.getFaculty() != null) {
            Faculty f = u.getFaculty();
            f.setPoints(f.getPoints() + points);
            facultyRepository.save(f);
            System.out.println("Added " + points + " points to user " + u.getName() + " and faculty " + f.getName() + " (reason: " + reason + ")");
        } else {
            System.out.println("User " + u.getName() + " has no faculty ‚Äî points added to user only (reason: " + reason + ")");
        }
    }

    // ------------------- MAIN MENU -------------------
    private void sendMainMenu(Long chatId) {
        User user = userService.findByTelegramId(chatId);
        String text = "üéâ –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:";
        SendMessage msg = new SendMessage();
        msg.setChatId(chatId.toString());
        msg.setText(text);
        msg.setReplyMarkup(buildMainMenu(user));
        executeMessage(msg);
    }

    // ------------------- MESSAGES & HELPERS -------------------
    private void handleMessage(Message message) {
        Long chatId = message.getChatId();
        Long userId = message.getFrom().getId();
        String text = message.getText();

        if ("/start".equals(text)) {
            if (registrationRequestService.isApproved(userId)) {
                sendMainMenu(chatId);
            } else {
                sendRoleSelection(chatId);
            }
            return;
        }

        // registration flow: if pending group and user sends name
        if (!registrationRequestService.isApproved(userId)
                && !"unknown".equals(registrationRequestService.getRole(userId))
                && registrationRequestService.getPendingGroup(userId) != null
                && !text.startsWith("/")) {

            RegistrationRequest req = registrationRequestService.createRequest(userId, text.trim());
            sendMessage(chatId, "‚úÖ –í–∞—à—ñ –¥–∞–Ω—ñ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—É.");
            notifyAdminAboutNewChild(req);
            return;
        }

        if (registrationRequestService.isApproved(userId)) {
            User user = userService.findByTelegramId(userId);
            Integer messageId = null;
            if ("üìù –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –î–ó".equalsIgnoreCase(text)) {
                if (user == null) {
                    sendMessage(chatId, "‚ùó –í–∏ —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ.");
                } else {
                    sendHomeworkMenu(chatId, messageId, user);
                }
            } else if ("üèÜ –ë–∏—Ç–≤–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ñ–≤".equalsIgnoreCase(text)) {
                handleFacultyBattle(chatId, user, messageId);
            } else {
                sendMessage(chatId, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é ‚¨áÔ∏è");
            }
        }
    }

    private void handlePhoto(Message message, User user) {
        String pendingDate = userService.getPendingHomeworkDate(user.getTelegramId());
        if (pendingDate == null) {
            sendMessage(message.getChatId(), "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —É—Ä–æ–∫ —á–µ—Ä–µ–∑ –º–µ–Ω—é –î–ó.");
            return;
        }

        try {
            // ‚úÖ —è–∫—â–æ —Ü–µ –±–∞—Ç—å–∫–∏, –ø—Ä–∞—Ü—é—î–º–æ –∑ –¥–∏—Ç–∏–Ω–æ—é
            User targetUser = (user.getRole() == Role.PARENT && user.getChild() != null) ? user.getChild() : user;

            // ‚úÖ –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–∞—Ç—É
            String formattedDate = DateUtil.toSheetsFormat(pendingDate);

            List<PhotoSize> photos = message.getPhoto();
            PhotoSize largestPhoto = photos.get(photos.size() - 1);
            InputStream fileStream = telegramService.downloadFile(largestPhoto.getFileId());
            if (fileStream == null) {
                sendMessage(message.getChatId(), "–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑ Telegram");
                return;
            }

            String groupFolderId = driveService.getOrCreateFolder(rootFolderId, targetUser.getGroup().getName());
            String dateFolderId = driveService.getOrCreateFolder(groupFolderId, formattedDate);

            String fileName = targetUser.getName() + "_homework_" + System.currentTimeMillis() + ".jpg";
            driveService.uploadFile(dateFolderId, fileStream, fileName, "image/jpeg");

            // ‚úÖ —è–∫—â–æ —â–µ –Ω–µ –Ω–∞–¥—Å–∏–ª–∞–ª–∏ –î–ó –∑–∞ —Ü—é –¥–∞—Ç—É ‚Äî –¥–∞—î–º–æ –±–∞–ª–∏ —ñ –ø–∏—à–µ–º–æ –≤ Sheets
            if (!userService.hasSubmittedHomework(targetUser, formattedDate)) {
                addPointsForUser(targetUser, 5, "–î–ó (–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)");

                sheetsService.setHomework(
                        targetUser.getGroup().getName(),
                        targetUser.getName(),
                        formattedDate,
                        "—á—É–¥–æ–≤–æ"
                );

                userService.markHomeworkSubmitted(targetUser, formattedDate);
                sendMessage(message.getChatId(), "‚úÖ –î–ó —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! üéÅ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ +5 –±–∞–ª—ñ–≤.");
            } else {
                sendMessage(message.getChatId(), "‚úÖ –î–æ–¥–∞–Ω–æ —â–µ –æ–¥–Ω–µ —Ñ–æ—Ç–æ –¥–æ –≤–∞—à–æ–≥–æ –î–ó.");
            }

        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(message.getChatId(), "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–æ—Ç–æ –Ω–∞ Google Drive.");
        }
    }

    private void handleDocument(Message message, User user) {
        String pendingDate = userService.getPendingHomeworkDate(user.getTelegramId());
        if (pendingDate == null) {
            sendMessage(message.getChatId(), "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–æ—á–∞—Ç–∫—É –æ–±–µ—Ä—ñ—Ç—å —É—Ä–æ–∫ —á–µ—Ä–µ–∑ –º–µ–Ω—é –î–ó.");
            return;
        }

        try {
            User targetUser = (user.getRole() == Role.PARENT && user.getChild() != null) ? user.getChild() : user;

            // ‚úÖ –Ω–æ—Ä–º–∞–ª—ñ–∑—É—î–º–æ –¥–∞—Ç—É
            String formattedDate = DateUtil.toSheetsFormat(pendingDate);

            InputStream fileStream = telegramService.downloadFile(message.getDocument().getFileId());
            String groupFolderId = driveService.getOrCreateFolder(rootFolderId, targetUser.getGroup().getName());
            String dateFolderId = driveService.getOrCreateFolder(groupFolderId, formattedDate);

            String fileName = targetUser.getName() + "_" + System.currentTimeMillis() + "_" + message.getDocument().getFileName();
            driveService.uploadFile(dateFolderId, fileStream, fileName, message.getDocument().getMimeType());

            if (!userService.hasSubmittedHomework(targetUser, formattedDate)) {
                addPointsForUser(targetUser, 5, "–î–ó (–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è)");

                sheetsService.setHomework(
                        targetUser.getGroup().getName(),
                        targetUser.getName(),
                        formattedDate,
                        "—á—É–¥–æ–≤–æ"
                );

                userService.markHomeworkSubmitted(targetUser, formattedDate);
                sendMessage(message.getChatId(), "‚úÖ –î–ó —É—Å–ø—ñ—à–Ω–æ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ! üéÅ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ +5 –±–∞–ª—ñ–≤.");
            } else {
                sendMessage(message.getChatId(), "‚úÖ –î–æ–¥–∞–Ω–æ —â–µ –æ–¥–∏–Ω —Ñ–∞–π–ª –¥–æ –≤–∞—à–æ–≥–æ –î–ó.");
            }

        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(message.getChatId(), "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É –Ω–∞ Google Drive.");
        }
    }

    private void sendRoleSelection(Long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–û–±–µ—Ä—ñ—Ç—å –≤–∞—à—É —Ä–æ–ª—å:");
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(InlineKeyboardButton.builder().text("üë∂ –î–∏—Ç–∏–Ω–∞").callbackData("role_child").build());
        row.add(InlineKeyboardButton.builder().text("üë®‚Äçüë©‚Äçüëß –ë–∞—Ç—å–∫–∏").callbackData("role_parent").build());
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(row);
        markup.setKeyboard(rows);
        message.setReplyMarkup(markup);
        executeMessage(message);
    }

    private void sendGroupSelection(Long chatId, Integer messageId) {
        List<Group> groups = groupRepository.findAll();
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText("–û–±–µ—Ä—ñ—Ç—å –≥—Ä—É–ø—É:");
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        for (Group g : groups) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            row.add(InlineKeyboardButton.builder().text(g.getName()).callbackData("group_" + g.getId()).build());
            rows.add(row);
        }
        markup.setKeyboard(rows);
        message.setReplyMarkup(markup);
        executeMessage(message);
    }

    private void notifyAdminAboutNewChild(RegistrationRequest req) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(adminChatId));
        message.setText("–ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:\n–î–∏—Ç–∏–Ω–∞: " + req.getName() +
                "\n–ì—Ä—É–ø–∞: " + registrationRequestService.getGroupName(req.getGroupId()) +
                "\nTelegram ID: " + req.getTelegramId());
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(InlineKeyboardButton.builder().text("‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏").callbackData("approve_" + req.getId()).build());
        row.add(InlineKeyboardButton.builder().text("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏").callbackData("reject_" + req.getId()).build());
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        rows.add(row);
        markup.setKeyboard(rows);
        message.setReplyMarkup(markup);
        executeMessage(message);
    }

    private void sendHomeworkMenu(Long chatId, Integer messageId, User user) {
        try {
            List<String> lastLessons = driveService.getLastFiveLessonDates(
                    user.getGroup().getDay1(), user.getGroup().getDay2(),
                    user.getGroup().getTime1(), user.getGroup().getTime2()
            );
            if (lastLessons.isEmpty()) {
                sendMessage(chatId, "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —É—Ä–æ–∫—ñ–≤ –¥–ª—è –î–ó.");
                return;
            }

            InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            for (String lesson : lastLessons) {
                List<InlineKeyboardButton> row = new ArrayList<>();
                row.add(InlineKeyboardButton.builder().text(lesson).callbackData("homework_" + lesson).build());
                rows.add(row);
            }
            markup.setKeyboard(rows);

            SendMessage message = new SendMessage();
            message.setChatId(chatId.toString());
            message.setText("–û–±–µ—Ä—ñ—Ç—å —É—Ä–æ–∫, –∑–∞ —è–∫–∏–π –Ω–∞–¥—Å–∏–ª–∞—î—Ç–µ –î–ó:");
            message.setReplyMarkup(markup);
            executeMessage(message);
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(chatId, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞—Ç —É—Ä–æ–∫—ñ–≤.");
        }
    }
    private void sendHomeworkStatus(Long chatId, User user) {
        try {
            // 1. –û—Ç—Ä–∏–º—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 5 —É—Ä–æ–∫—ñ–≤ (–¥–∞—Ç–∏)
            List<String> lastLessons = driveService.getLastFiveLessonDates(
                    user.getGroup().getDay1(), user.getGroup().getDay2(),
                    user.getGroup().getTime1(), user.getGroup().getTime2()
            );
            if (lastLessons.isEmpty()) {
                sendMessage(chatId, "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —É—Ä–æ–∫—ñ–≤ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏.");
                return;
            }

            // 2. –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ –î–ó –∑ Google Sheets
            List<String> homeworkStatuses = sheetsService.getHomeworkStatusesForLessons(user, lastLessons);

            // 3. –§–æ—Ä–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            StringBuilder sb = new StringBuilder("üìö *–í–∞—à—ñ –î–ó –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 5 —É—Ä–æ–∫—ñ–≤:*\n\n");
            for (int i = 0; i < lastLessons.size(); i++) {
                String date = lastLessons.get(i);
                String status = (i < homeworkStatuses.size() && homeworkStatuses.get(i) != null)
                        ? homeworkStatuses.get(i)
                        : "‚Äî";
                sb.append("‚Ä¢ ").append(date).append(" ‚Äî ").append(status).append("\n");
            }

            // 4. –ù–∞–¥—Å–∏–ª–∞—î–º–æ
            sendMessage(chatId, sb.toString());
        } catch (Exception e) {
            e.printStackTrace();
            sendMessage(chatId, "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å—Ç–∞—Ç—É—Å—ñ–≤ –î–ó üòî");
        }
    }

    private void executeMessage(SendMessage message) {
        try {
            execute(message);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
