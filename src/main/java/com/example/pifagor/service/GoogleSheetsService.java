package com.example.pifagor.service;

import com.example.pifagor.model.User;
import com.example.pifagor.util.DateUtil;
import com.google.api.client.auth.oauth2.Credential;
import com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp;
import com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver;
import com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow;
import com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets;
import com.google.api.client.googleapis.auth.oauth2.GoogleCredential;
import com.google.api.client.googleapis.javanet.GoogleNetHttpTransport;
import com.google.api.client.json.gson.GsonFactory;
import com.google.api.client.util.store.FileDataStoreFactory;
import com.google.api.services.sheets.v4.Sheets;
import com.google.api.services.sheets.v4.SheetsScopes;
import com.google.api.services.sheets.v4.model.*;
import org.springframework.stereotype.Service;

import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;

@Service
public class GoogleSheetsService {

    private static final String APPLICATION_NAME = "MathSchoolBot";
    private static final String SPREADSHEET_ID = "1ZX49DJPlOUfa6AjsjDCDVPfJCys7WBMUWq4SBUiVr5U";

    private final Sheets sheetsService;

    public GoogleSheetsService() {
        try {
            var httpTransport = GoogleNetHttpTransport.newTrustedTransport();
            var jsonFactory = GsonFactory.getDefaultInstance();

            String clientId = System.getenv("GOOGLE_CLIENT_ID");
            String clientSecret = System.getenv("GOOGLE_CLIENT_SECRET");
            String refreshToken = System.getenv("GOOGLE_REFRESH_TOKEN");

            if (clientId == null || clientSecret == null || refreshToken == null) {
                throw new IllegalStateException("–ù–µ –≤–∏—Å—Ç–∞—á–∞—î –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –¥–ª—è Google OAuth");
            }

            GoogleCredential credential = new GoogleCredential.Builder()
                    .setTransport(httpTransport)
                    .setJsonFactory(jsonFactory)
                    .setClientSecrets(clientId, clientSecret)
                    .build()
                    .setRefreshToken(refreshToken);

            this.sheetsService = new Sheets.Builder(httpTransport, jsonFactory, credential)
                    .setApplicationName(APPLICATION_NAME)
                    .build();

        } catch (Exception e) {
            throw new RuntimeException("–ù–µ –≤–¥–∞–ª–æ—Å—è —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ GoogleSheetsService", e);
        }
    }

    public Sheets getSheetsService() {
        return sheetsService;
    }

    public String getSpreadsheetId() {
        return SPREADSHEET_ID;
    }




    /**
     * –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—á–Ω—ñ–≤ (2-–π —Ä—è–¥–æ–∫ —É –∞—Ä–∫—É—à—ñ –≥—Ä—É–ø–∏)
     */
    public List<String> getStudents(String groupName) throws Exception {
        String range = groupName + "!2:2"; // –¥—Ä—É–≥–∏–π —Ä—è–¥–æ–∫
        ValueRange response = sheetsService.spreadsheets().values()
                .get(SPREADSHEET_ID, range)
                .execute();

        List<Object> row = response.getValues() != null ? response.getValues().get(0) : new ArrayList<>();
        List<String> students = new ArrayList<>();
        for (Object o : row) {
            String name = String.valueOf(o).trim();
            if (!name.isBlank() && !name.equalsIgnoreCase("–î–∞—Ç–∞") && !name.equalsIgnoreCase("–¢–µ–º–∞")) {
                students.add(name);
            }
        }
        return students;
    }

    /**
     * –í–∏—Å—Ç–∞–≤–∏—Ç–∏ –æ—Ü—ñ–Ω–∫—É —É—á–Ω—é
     */
    /** –í–∏—Å—Ç–∞–≤–ª—è—î –æ—Ü—ñ–Ω–∫—É */
    public void setGrade(String groupName, String studentName, String date, int grade) throws Exception {
        System.out.println("Date: "+ date);
        String formattedDate = DateUtil.toSheetsFormat(date);
        System.out.println("formattedDate: "+ formattedDate);
        String cell = findCell(groupName, studentName, formattedDate, false);

        ValueRange body = new ValueRange().setValues(List.of(List.of(grade)));
        sheetsService.spreadsheets().values()
                .update(SPREADSHEET_ID, cell, body)
                .setValueInputOption("RAW")
                .execute();
    }

    /** –í–∏—Å—Ç–∞–≤–ª—è—î –î–ó */
    public void setHomework(String groupName, String studentName, String date, String status) throws Exception {
        String formattedDate = DateUtil.toSheetsFormat(date);

        String cell = findCell(groupName, studentName, formattedDate, true);

        ValueRange body = new ValueRange().setValues(List.of(List.of(status)));
        sheetsService.spreadsheets().values()
                .update(SPREADSHEET_ID, cell, body)
                .setValueInputOption("RAW")
                .execute();
    }

    public List<String> getHomeworkStatusesForLessons(User user, List<String> lessonDates) throws Exception {
        String sheetName = user.getGroup().getName(); // –ù–∞–ø—Ä. "6–∫–ª.–ü–Ω.–ß—Ç.16:00"
        String safeSheetName = sheetName.replace("'", "");
        String range = "'" + safeSheetName + "'!A:Z";

        ValueRange response = sheetsService.spreadsheets().values()
                .get(SPREADSHEET_ID, range)
                .execute();
        List<List<Object>> rows = response.getValues();
        if (rows == null || rows.isEmpty()) return Collections.emptyList();

        // üîπ –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–æ–ª–æ–Ω–∫—É "–î–ó" –¥–ª—è —Ü—å–æ–≥–æ —É—á–Ω—è
        int userHomeworkCol = -1;
        for (List<Object> row : rows) {
            for (int j = 0; j < row.size(); j++) {
                String cell = row.get(j).toString().trim();
                if (cell.equalsIgnoreCase(user.getName()) && j + 1 < row.size()) {
                    String next = row.get(j + 1).toString().toLowerCase();
                    if (next.contains("–¥–∑")) {
                        userHomeworkCol = j + 1;
                        break;
                    }
                }
            }
            if (userHomeworkCol != -1) break;
        }

        if (userHomeworkCol == -1) {
            System.out.println("‚ùó –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–∫—É –î–ó –¥–ª—è " + user.getName() + " –Ω–∞ –∞—Ä–∫—É—à—ñ " + sheetName);
            return Collections.emptyList();
        }

        // üîπ –ü—Ä–æ—Å—Ç–∞–≤–ª—è—î–º–æ "–Ω–µ–º–∞—î" —É –≤—Å—ñ –ø–æ—Ä–æ–∂–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –¥–æ –ø–æ—Ç–æ—á–Ω–æ—ó –¥–∞—Ç–∏
        List<ValueRange> updates = new ArrayList<>();
        DateTimeFormatter df = DateTimeFormatter.ofPattern("dd.MM.yy");

        LocalDate today = LocalDate.now();
        for (int i = 1; i < rows.size(); i++) {
            List<Object> row = rows.get(i);
            if (row.isEmpty()) continue;

            try {
                String dateStr = row.get(0).toString().trim();
                if (dateStr.isEmpty()) continue;

                LocalDate lessonDate = LocalDate.parse(dateStr, df);
                if (lessonDate.isBefore(today)) { // —Ç—ñ–ª—å–∫–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –¥–∞—Ç–∏
                    // —è–∫—â–æ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –ø–æ—Ä–æ–∂–Ω—è ‚Äî –æ–Ω–æ–≤–ª—é—î–º–æ
                    if (row.size() <= userHomeworkCol || row.get(userHomeworkCol).toString().trim().isEmpty()) {
                        String cellRef = safeSheetName + "!" + getColumnLetter(userHomeworkCol) + (i + 1);
                        updates.add(new ValueRange()
                                .setRange(cellRef)
                                .setValues(List.of(List.of("–Ω–µ–º–∞—î"))));
                    }
                }
            } catch (Exception ignored) {}
        }

        if (!updates.isEmpty()) {
            BatchUpdateValuesRequest batchRequest = new BatchUpdateValuesRequest()
                    .setValueInputOption("RAW")
                    .setData(updates);
            sheetsService.spreadsheets().values().batchUpdate(SPREADSHEET_ID, batchRequest).execute();
            System.out.println("‚úÖ –ü—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–æ '–Ω–µ–º–∞—î' —É " + updates.size() + " –∫–ª—ñ—Ç–∏–Ω–∫–∞—Ö –¥–ª—è " + user.getName());
        }

        // üîπ –§–æ—Ä–º—É—î–º–æ —Å—Ç–∞—Ç—É—Å–∏ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö 5 —É—Ä–æ–∫—ñ–≤
        List<String> results = new ArrayList<>();
        for (String lessonDate : lessonDates) {
            String status = "‚Äî";
            for (List<Object> row : rows) {
                if (!row.isEmpty() && row.get(0).toString().contains(lessonDate)) {
                    if (row.size() > userHomeworkCol) {
                        status = row.get(userHomeworkCol).toString();
                    }
                    break;
                }
            }
            results.add(status);
        }

        return results;
    }
    private String getColumnLetter(int columnIndex) {
        StringBuilder column = new StringBuilder();
        int index = columnIndex;
        while (index >= 0) {
            column.insert(0, (char) ('A' + (index % 26)));
            index = (index / 26) - 1;
        }
        return column.toString();
    }
    /** –ü–æ—à—É–∫ –∫–æ–º—ñ—Ä–∫–∏ —É—á–Ω—è+–¥–∞—Ç–∞ */
    private String findCell(String groupName, String studentName, String date, boolean isHomework) throws Exception {
        // 1. –ë–µ–∑–ø–µ—á–Ω–∞ –Ω–∞–∑–≤–∞ –∞—Ä–∫—É—à–∞ (–∞–ø–æ—Å—Ç—Ä–æ—Ñ–∏ + –ø—Ä–æ–±—ñ–ª–∏)
        String safeSheetName = "'" + groupName.replace("'", "") + "'";

        // 2. –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –¥–∞—Ç–∏ (—Å—Ç–æ–≤–ø–µ—Ü—å –ê)
        String range = safeSheetName + "!A:A";
        ValueRange response = sheetsService.spreadsheets().values()
                .get(SPREADSHEET_ID, range)
                .execute();

        List<List<Object>> rows = response.getValues();
        if (rows == null) throw new Exception("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó –¥–∞—Ç–∏ —É –≥—Ä—É–ø—ñ " + groupName);

        // 3. –®—É–∫–∞—î–º–æ –ø–æ—Ç—Ä—ñ–±–Ω—É –¥–∞—Ç—É (—ñ–≥–Ω–æ—Ä—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–±—ñ–ª—ñ–≤)
        int rowIndex = -1;
        for (int i = 0; i < rows.size(); i++) {
            if (!rows.get(i).isEmpty()) {
                String sheetDate = rows.get(i).get(0).toString().trim();
                if (sheetDate.equalsIgnoreCase(date.trim())) {
                    rowIndex = i + 1; // Google Sheets —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –∑ 1
                    break;
                }
            }
        }
        if (rowIndex == -1) throw new Exception("–î–∞—Ç–∞ " + date + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –≤ –≥—Ä—É–ø—ñ " + groupName);

        // 4. –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (—Ä—è–¥–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤)
        String headerRange = safeSheetName + "!1:1";
        ValueRange headerResp = sheetsService.spreadsheets().values()
                .get(SPREADSHEET_ID, headerRange)
                .execute();

        if (headerResp.getValues() == null || headerResp.getValues().isEmpty())
            throw new Exception("–†—è–¥–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –∞—Ä–∫—É—à—ñ " + groupName);

        List<Object> headerRow = headerResp.getValues().get(0);
        int colIndex = -1;
        for (int i = 0; i < headerRow.size(); i++) {
            if (studentName.equalsIgnoreCase(headerRow.get(i).toString().trim())) {
                colIndex = i;
                break;
            }
        }
        if (colIndex == -1) throw new Exception("–£—á–µ–Ω—å " + studentName + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π —É –≥—Ä—É–ø—ñ " + groupName);

        // 5. –î–ª—è –î–ó –∑—Å—É–≤ –≤–ø—Ä–∞–≤–æ
        if (isHomework) {
            colIndex++;
        }

        return safeSheetName + "!" + columnLetter(colIndex + 1) + rowIndex;
    }
    public void updateHomeworkDropdowns(List<String> sheetNames) throws Exception {
        for (String sheetName : sheetNames) {
            updateHomeworkDropdownForSheet(sheetName);
        }
    }

    private void updateHomeworkDropdownForSheet(String sheetName) throws Exception {
        // 1Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ ID –∞—Ä–∫—É—à–∞
        Spreadsheet spreadsheet = sheetsService.spreadsheets()
                .get(SPREADSHEET_ID)
                .execute();

        Sheet sheet = spreadsheet.getSheets().stream()
                .filter(s -> s.getProperties().getTitle().equalsIgnoreCase(sheetName))
                .findFirst()
                .orElseThrow(() -> new RuntimeException("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞—Ä–∫—É—à: " + sheetName));

        /// –°–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —Ä—è–¥–æ–∫, —É —è–∫–æ–º—É —î "–î–ó"
        int headerRowIndex = -1;
        String headerRangeToCheck = "'" + sheetName + "'!1:10"; // –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø–µ—Ä—à—ñ 10 —Ä—è–¥–∫—ñ–≤

        ValueRange headerRows = sheetsService.spreadsheets().values()
                .get(SPREADSHEET_ID, headerRangeToCheck)
                .execute();

        List<List<Object>> headerValues = headerRows.getValues();

        if (headerValues != null) {
            for (int i = 0; i < headerValues.size(); i++) {
                List<Object> row = headerValues.get(i);
                for (Object cell : row) {
                    if (cell != null && cell.toString().toLowerCase().contains("–¥–∑")) {
                        headerRowIndex = i + 1; // —Ä—è–¥–∫–∏ –Ω—É–º–µ—Ä—É—é—Ç—å—Å—è –∑ 1, –∞ —ñ–Ω–¥–µ–∫—Å–∏ –∑ 0
                        break;
                    }
                }
                if (headerRowIndex != -1) break;
            }
        }

        if (headerRowIndex == -1) {
            System.out.println("‚ùó –ù–∞ –∞—Ä–∫—É—à—ñ " + sheetName + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä—è–¥–∫–∞ –∑ –∫–æ–ª–æ–Ω–∫–∞–º–∏ –î–ó");
            return;
        }

        System.out.println("‚úÖ –ù–∞ –∞—Ä–∫—É—à—ñ " + sheetName + " –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —É —Ä—è–¥–∫—É " + headerRowIndex);

// –¢–µ–ø–µ—Ä —Ñ–æ—Ä–º—É—î–º–æ –¥—ñ–∞–ø–∞–∑–æ–Ω —Å–∞–º–µ –∑ —Ü—å–æ–≥–æ —Ä—è–¥–∫–∞
        String headerRange = "'" + sheetName + "'!" + headerRowIndex + ":" + headerRowIndex;
        ValueRange headerResp = sheetsService.spreadsheets().values()
                .get(SPREADSHEET_ID, headerRange)
                .execute();

        List<Object> header = headerResp.getValues() != null ? headerResp.getValues().get(0) : new ArrayList<>();

        // 3Ô∏è‚É£ –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∫–æ–ª–æ–Ω–∫–∏ –∑ –Ω–∞–∑–≤–æ—é "–î–ó"
        List<Integer> homeworkCols = new ArrayList<>();
        for (int i = 0; i < header.size(); i++) {
            if (String.valueOf(header.get(i)).equalsIgnoreCase("–î–ó")) {
                homeworkCols.add(i);
            }
        }

        if (homeworkCols.isEmpty()) {
            System.out.println("‚ùó –ù–∞ –∞—Ä–∫—É—à—ñ " + sheetName + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –î–ó");
            return;
        }

        // 4Ô∏è‚É£ –§–æ—Ä–º—É—î–º–æ –Ω–æ–≤–µ –ø—Ä–∞–≤–∏–ª–æ
        List<String> values = List.of("—á—É–¥–æ–≤–æ", "—á–∞—Å—Ç–∫–æ–≤–æ", "–Ω–µ–º–∞—î", "–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ", "–≤–∏–∫–æ–Ω–∞–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ");

        List<Request> requests = new ArrayList<>();
        for (Integer col : homeworkCols) {
            GridRange range = new GridRange()
                    .setSheetId(sheet.getProperties().getSheetId())
                    .setStartRowIndex(2) // –∑ 3-–≥–æ —Ä—è–¥–∫–∞
                    .setStartColumnIndex(col)
                    .setEndColumnIndex(col + 1);

            DataValidationRule rule = new DataValidationRule()
                    .setCondition(new BooleanCondition()
                            .setType("ONE_OF_LIST")
                            .setValues(values.stream()
                                    .map(v -> new ConditionValue().setUserEnteredValue(v))
                                    .toList()))
                    .setStrict(true)
                    .setShowCustomUi(true);

            requests.add(new Request().setSetDataValidation(
                    new SetDataValidationRequest()
                            .setRange(range)
                            .setRule(rule)
            ));
        }

        BatchUpdateSpreadsheetRequest body = new BatchUpdateSpreadsheetRequest().setRequests(requests);
        sheetsService.spreadsheets().batchUpdate(SPREADSHEET_ID, body).execute();

        System.out.println("‚úÖ –û–Ω–æ–≤–ª–µ–Ω–æ –≤–∏–ø–∞–¥–∞—é—á—ñ —Å–ø–∏—Å–∫–∏ –¥–ª—è –∞—Ä–∫—É—à–∞ " + sheetName);
    }
    /**
     * –î–æ–¥–∞—î conditional formatting –¥–ª—è –≤—Å—ñ—Ö –∫–æ–ª–æ–Ω–æ–∫ "–î–ó" –Ω–∞ –∞—Ä–∫—É—à—ñ.
     */
    public void addHomeworkColorRulesForSheet(String sheetName) throws Exception {
        String safeSheetName = sheetName.replace("'", "");
        // 1) –û—Ç—Ä–∏–º–∞—Ç–∏ metadata –¥–ª—è –ø–æ—à—É–∫—É sheetId
        Spreadsheet spreadsheet = sheetsService.spreadsheets().get(SPREADSHEET_ID).setIncludeGridData(false).execute();
        Integer sheetId = null;
        for (Sheet s : spreadsheet.getSheets()) {
            if (safeSheetName.equals(s.getProperties().getTitle())) {
                sheetId = s.getProperties().getSheetId();
                break;
            }
        }
        if (sheetId == null) {
            throw new IllegalArgumentException("Sheet not found: " + sheetName);
        }

        // 2) –ó–Ω–∞–π—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤–∏–π —Ä—è–¥–æ–∫ (–ø–µ—Ä—à—ñ 10 —Ä—è–¥–∫—ñ–≤)
        String headerRangeToCheck = "'" + sheetName + "'!1:10";
        ValueRange headerRows = sheetsService.spreadsheets().values()
                .get(SPREADSHEET_ID, headerRangeToCheck)
                .execute();
        List<List<Object>> headerValues = headerRows.getValues();
        if (headerValues == null) {
            throw new IllegalStateException("No header rows in sheet " + sheetName);
        }

        int headerRowIndex = -1;
        List<Object> headerRow = null;
        for (int i = 0; i < headerValues.size(); i++) {
            List<Object> row = headerValues.get(i);
            for (Object cell : row) {
                if (cell != null && cell.toString().toLowerCase().contains("–¥–∑")) {
                    headerRow = row;
                    headerRowIndex = i + 1; // 1-based
                    break;
                }
            }
            if (headerRowIndex != -1) break;
        }
        if (headerRowIndex == -1) {
            System.out.println("‚ùó –ù–∞ –∞—Ä–∫—É—à—ñ " + sheetName + " –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –î–ó");
            return;
        }

        // 3) –ó–Ω–∞–π—Ç–∏ —ñ–Ω–¥–µ–∫—Å–∏ –∫–æ–ª–æ–Ω–æ–∫, –¥–µ —î "–î–ó"
        List<Integer> dzColumnIndexes = new ArrayList<>(); // 0-based
        for (int c = 0; c < headerRow.size(); c++) {
            Object h = headerRow.get(c);
            if (h != null && h.toString().toLowerCase().contains("–¥–∑")) {
                dzColumnIndexes.add(c);
            }
        }
        if (dzColumnIndexes.isEmpty()) {
            System.out.println("‚ùó –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–ª–æ–Ω–æ–∫ –î–ó —É –∑–∞–≥–æ–ª–æ–≤–∫—É –Ω–∞ " + sheetName);
            return;
        }

        // 4) –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ ‚Äî –≤—ñ–¥ —è–∫–æ–≥–æ —Ä—è–¥–∫–∞ –Ω–∏–∂—á–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞—Å—Ç–æ—Å–æ–≤—É–≤–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ headerRowIndex+0 -> —Å–∞–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∫–ª—é—á–Ω–æ)
        int startRow = headerRowIndex + 0;            // 1-based
        int endRow = 1000; // –Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –ø–æ–∫–∏ –¥–æ 1000. –ú–æ–∂–µ—à –¥–∏–Ω–∞–º—ñ—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ä—è–¥–æ–∫.

        // 5) –ö–æ–ª—å–æ—Ä–∏ (RGB –≤ –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ 0..1)
        Color green = new Color().setRed(0f).setGreen(0.8f).setBlue(0.2f); // —á—É–¥–æ–≤–æ
        Color yellow = new Color().setRed(1f).setGreen(0.85f).setBlue(0.2f); // —á–∞—Å—Ç–∫–æ–≤–æ
        Color red = new Color().setRed(0.94f).setGreen(0.2f).setBlue(0.2f); // –≤–∏–∫–æ–Ω–∞–Ω–æ –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        Color gray = new Color().setRed(0.15f).setGreen(0.15f).setBlue(0.15f); // –Ω–µ–º–∞—î (—Ç–µ–º–Ω–∏–π)
        Color neutral = new Color().setRed(0.9f).setGreen(0.9f).setBlue(0.9f); // –Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ (—Å–≤—ñ—Ç–ª–æ-–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π)

        // Map value -> color
        Map<String, Color> map = new LinkedHashMap<>();
        map.put("—á—É–¥–æ–≤–æ", green);
        map.put("—á–∞—Å—Ç–∫–æ–≤–æ", yellow);
        map.put("–Ω–µ–º–∞—î", red);
        map.put("–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ", neutral);

        // 6) –î–ª—è –∫–æ–∂–Ω–æ—ó found column - —Å—Ç–≤–æ—Ä–∏—Ç–∏ ConditionalFormatRule –∑ TEXT_EQ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–Ω—è
        List<Request> requests = new ArrayList<>();
        for (Integer colIndex0 : dzColumnIndexes) {
            GridRange gridRange = new GridRange()
                    .setSheetId(sheetId)
                    // API –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î 0-based indices and endIndex exclusive
                    .setStartRowIndex(startRow - 1)        // —Ä–æ–±–∏–º–æ –∑ headerRowIndex (—è–∫—â–æ —Ö–æ—á–µ—à –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫—É -> +1)
                    .setEndRowIndex(endRow)               // exclusive
                    .setStartColumnIndex(colIndex0)
                    .setEndColumnIndex(colIndex0 + 1);

            for (Map.Entry<String, Color> e : map.entrySet()) {
                String targetValue = e.getKey();
                Color color = e.getValue();

                // BooleanRule –∑ TEXT_EQ
                BooleanCondition cond = new BooleanCondition()
                        .setType("TEXT_EQ")
                        .setValues(List.of(new ConditionValue().setUserEnteredValue(targetValue)));

                CellFormat fmt = new CellFormat().setBackgroundColor(color);

                BooleanRule rule = new BooleanRule().setCondition(cond).setFormat(fmt);

                ConditionalFormatRule cfr = new ConditionalFormatRule()
                        .setRanges(List.of(gridRange))
                        .setBooleanRule(rule);

                requests.add(new Request().setAddConditionalFormatRule(new AddConditionalFormatRuleRequest().setRule(cfr).setIndex(0)));
            }
        }

        // 7) –í–∏–∫–ª–∏–∫ batchUpdate
        BatchUpdateSpreadsheetRequest body = new BatchUpdateSpreadsheetRequest().setRequests(requests);
        sheetsService.spreadsheets().batchUpdate(SPREADSHEET_ID, body).execute();

        System.out.println("‚úÖ Conditional formatting added for sheet " + sheetName);
    }
    // üîπ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ —Å—Ç–æ–≤–ø—Ü—è ‚Üí –±—É–∫–≤—É (A,B,C,...)
    private String columnLetter(int col) {
        StringBuilder sb = new StringBuilder();
        while (col > 0) {
            int rem = (col - 1) % 26;
            sb.insert(0, (char) (rem + 'A'));
            col = (col - 1) / 26;
        }
        return sb.toString();
    }
}
